byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
byte[] fileContent;
try
{
    fileContent = File.ReadAllBytes(clientFilePath);
}
catch (IOException ex)
{
    // Handle the exception if the file is being used by another process
    MessageBox.Show("Error reading file: " + ex.Message);
    return;
}

// Compute the hash of the client file
using (var sha1 = SHA1.Create())
{
    var clientHash = sha1.ComputeHash(fileContent);
    string clientFileHash = BitConverter.ToString(clientHash).Replace("-", "").ToLower();

    // Compare the file hash with the server file hash and perform necessary actions
    // ...
}
